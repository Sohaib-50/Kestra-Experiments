id: Gaditek_AD_test_1
namespace: foo
description: Fetches all data gettable from the AD


variables:
  password: <redacted>

tasks:

  - id: fetches
    type: io.kestra.plugin.core.flow.Parallel
    tasks:

    - id: fetch_computers
      type: io.kestra.plugin.ldap.Search
      userDn: cn=Administrator,cn=Users,dc=test,dc=local
      password: "{{ vars.password }}"
      baseDn: dc=test,dc=local
      hostname: 3.123.143.202
      port: "389"
      filter: (objectClass=computer)


    - id: fetch_users
      type: io.kestra.plugin.ldap.Search
      userDn: cn=Administrator,cn=Users,dc=test,dc=local
      password: "{{ vars.password }}"
      baseDn: dc=test,dc=local
      hostname: 3.123.143.202
      port: "389"
      filter: (objectClass=user)


    - id: fetch_users_details
      type: io.kestra.plugin.ldap.Search
      userDn: cn=Administrator,cn=Users,dc=test,dc=local
      password: "{{ vars.password }}"
      baseDn: dc=test,dc=local
      hostname: 3.123.143.202
      port: "389"
      filter: (objectClass=user)
      attributes:
        - dn
        - cn
        - description
        - lastLogon
        - lastLogoff
        - sAMAccountName
        - userPrincipalName 
        - mail
        - displayName
        - distinguishedName
        - accountExpires
        - enabled
        - memberOf
        - whenCreated
        - title
        - department
        - objectSid
        - objectGUID
        - logonCount
        - badPwdCount
        - badPasswordTime
        - objectClass


  - id: save
    type: io.kestra.plugin.scripts.python.Script
    outputFiles:
      - "out.txt"
    script: |
      import os
      from collections import defaultdict
      import json

      print("Reading")
      with open('{{ outputs.fetch_users_details.uri }}', 'r') as f:
        fetch_data = f.read().strip().split("\n\n")

      users = []
      for user in fetch_data:
        user_attributes = defaultdict(list)
        lines = user.split("\n")
        for line in lines:
          param_end_index = line.index(":")
          param = line[:param_end_index].strip()
          val = line[param_end_index + 1:].strip()

          if param not in user_attributes:
            user_attributes[param] = val
          else:
            if isinstance(user_attributes[param], str):
              user_attributes[param] = [user_attributes[param]]
            user_attributes[param].append(val)
            
        users.append(user_attributes)

      most_attrs_user = None
      most_attrs = float("-inf")
      for user in users:
        if len(user) > most_attrs:
          most_attrs = len(user)
          most_attrs_user = user
        
      print("Writing")
      with open("out.txt", "w") as f:
        f.write(f"Most attributes user: {most_attrs_user} with {most_attrs} attributes\n")
        f.write(json.dump(users, indent=2))